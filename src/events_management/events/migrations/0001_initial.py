# Generated by Django 2.1.1 on 2019-02-10 18:25

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('account_id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=64, unique=True)),
                ('password', models.CharField(max_length=64)),
            ],
            options={
                'verbose_name_plural': 'users',
                'abstract': False,
                'verbose_name': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('competition_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=100)),
                ('start_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('county_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('event_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('relay_duration', models.IntegerField(default=0)),
                ('athletes_per_relay', models.IntegerField(default=0)),
                ('competition_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.Competition')),
            ],
        ),
        migrations.CreateModel(
            name='Heat',
            fields=[
                ('heat_id', models.AutoField(primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField()),
                ('event_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.Event')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('player_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other/No Answer', 'Other/No Answer')], default='Other/No Answer', max_length=16)),
                ('availability', models.CharField(choices=[('Saturday', 'Saturday'), ('Sunday', 'Sunday'), ('Both', 'Both')], default='Saturday', max_length=8)),
                ('competition_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.Competition')),
                ('county_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.County')),
                ('events', models.ManyToManyField(to='events.Event')),
            ],
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.CharField(default=' ', max_length=100)),
                ('last_name', models.CharField(default=' ', max_length=100)),
                ('email', models.CharField(default=' ', max_length=200)),
                ('phone_number', models.CharField(default=' ', max_length=12)),
                ('current_competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.Competition')),
            ],
        ),
        migrations.CreateModel(
            name='Coach',
            fields=[
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.CharField(max_length=200)),
                ('phone_number', models.CharField(max_length=12, validators=[django.core.validators.RegexValidator('^(\\d{10})$', code='invalid_phone', message='Please enter a phone number of the format XXXXXXXXXX')])),
                ('county_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.County')),
                ('current_competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.Competition')),
            ],
        ),
        migrations.AddField(
            model_name='heat',
            name='players',
            field=models.ManyToManyField(to='events.Player'),
        ),
        migrations.AddField(
            model_name='account',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='account',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
